{
  "stats": {
    "suites": 5,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-29T18:19:16.525Z",
    "end": "2022-05-29T18:19:16.550Z",
    "duration": 25,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ab68ecd8-a8e6-462a-a6be-2da3efd64a19",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "65cb14c9-746b-45c0-a14f-ab10532b4c2c",
          "title": "User input format check",
          "fullFile": "/Users/brunoh/assignment/typescript_source/test.spec.ts",
          "file": "/typescript_source/test.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should accept empty string",
              "fullTitle": "User input format check should accept empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.hasCorrectFormat(\"\"), true, 'empty string');",
              "err": {},
              "uuid": "7facdf23-f236-45cc-9d89-f4c883319970",
              "parentUUID": "65cb14c9-746b-45c0-a14f-ab10532b4c2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should accept alphanumeric strings",
              "fullTitle": "User input format check should accept alphanumeric strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.hasCorrectFormat(\"a\"), true, '\\\"a\\\"');\nassert.equal(convertor.hasCorrectFormat(\"B\"), true, '\\\"B\\\"');\nassert.equal(convertor.hasCorrectFormat(\"4\"), true, '\\\"4\\\"');\nassert.equal(convertor.hasCorrectFormat(\"adacta\"), true, '\\\"adacta\\\"');\nassert.equal(convertor.hasCorrectFormat(\"ADACTA\"), true, '\\\"ADACTA\\\"');\nassert.equal(convertor.hasCorrectFormat(\"AdAcTa\"), true, '\\\"AdAcTa\\\"');\nassert.equal(convertor.hasCorrectFormat(\"A2d0a2C2Ta\"), true, '\\\"A2d0a2C2Ta\\\"');",
              "err": {},
              "uuid": "bed34eb7-e020-43b9-aa8e-ed35fa6eba54",
              "parentUUID": "65cb14c9-746b-45c0-a14f-ab10532b4c2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject non-alphanumeric strings",
              "fullTitle": "User input format check should reject non-alphanumeric strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.hasCorrectFormat(\"?\"), false, '\\\"?\\\"');\nassert.equal(convertor.hasCorrectFormat(\"?!:\"), false, '\\\"?!:\\\"');\nassert.equal(convertor.hasCorrectFormat(\"B.\"), false, '\\\"B.\\\"');\nassert.equal(convertor.hasCorrectFormat(\",4\"), false, '\\\",4\\\"');\nassert.equal(convertor.hasCorrectFormat(\"a/dacta\"), false, '\\\"a/dacta\\\"');\nassert.equal(convertor.hasCorrectFormat(\"ADACT|A\"), false, '\\\"ADACT|A\\\"');\nassert.equal(convertor.hasCorrectFormat(\">AdAcTa\"), false, '\\\">AdAcTa\\\"');\nassert.equal(convertor.hasCorrectFormat(\"A2d0a2C2Ta<\"), false, '\\\"A2d0a2C2Ta<\\\"');\nassert.equal(convertor.hasCorrectFormat(\"A2d|}0{a(2C2Ta\"), false, '\\\"A2d|}0{a(2C2Ta\\\"');",
              "err": {},
              "uuid": "b813a003-345d-468d-bb98-7d61ebd073ae",
              "parentUUID": "65cb14c9-746b-45c0-a14f-ab10532b4c2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7facdf23-f236-45cc-9d89-f4c883319970",
            "bed34eb7-e020-43b9-aa8e-ed35fa6eba54",
            "b813a003-345d-468d-bb98-7d61ebd073ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c65462b4-3e40-4a11-89fc-b466fe67acfc",
          "title": "Letters transform check: lowercase to uppercase, uppercase to lowercase",
          "fullFile": "/Users/brunoh/assignment/typescript_source/test.spec.ts",
          "file": "/typescript_source/test.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "random letters",
              "fullTitle": "Letters transform check: lowercase to uppercase, uppercase to lowercase random letters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.transformString(\"a\"), \"A\", '\"a\" => \"A\"');\nassert.equal(convertor.transformString(\"H\"), \"h\", '\"H\" => \"h\"');\nassert.equal(convertor.transformString(\"m\"), \"M\", '\"m\" => \"M\"');\nassert.equal(convertor.transformString(\"X\"), \"x\", '\"X\" => \"x\"');",
              "err": {},
              "uuid": "a5a76243-a0c2-4215-bf19-a2511df959e0",
              "parentUUID": "c65462b4-3e40-4a11-89fc-b466fe67acfc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5a76243-a0c2-4215-bf19-a2511df959e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e190b33c-4dda-4a51-b443-f6e454de330d",
          "title": "String transform check: reverse string, lowercase to uppercase, uppercase to lowercase, numbers not changed",
          "fullFile": "/Users/brunoh/assignment/typescript_source/test.spec.ts",
          "file": "/typescript_source/test.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "empty string",
              "fullTitle": "String transform check: reverse string, lowercase to uppercase, uppercase to lowercase, numbers not changed empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.transformString(\"\"), \"\", '\"\" => \"\"');",
              "err": {},
              "uuid": "56dc289f-7df0-422a-9efe-71643c947066",
              "parentUUID": "e190b33c-4dda-4a51-b443-f6e454de330d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "all numbers",
              "fullTitle": "String transform check: reverse string, lowercase to uppercase, uppercase to lowercase, numbers not changed all numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.transformString(\"5\"), \"5\", '\"5\" => \"5\"');\nassert.equal(convertor.transformString(\"53327\"), \"72335\", '\"53327\" => \"72335\"');\nassert.equal(convertor.transformString(\"8752927635\"), \"5367292578\", '\"8752927635\" => \"5367292578\"');",
              "err": {},
              "uuid": "07464f8d-580a-418d-9b7f-ac68c0692162",
              "parentUUID": "e190b33c-4dda-4a51-b443-f6e454de330d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "all lowercase",
              "fullTitle": "String transform check: reverse string, lowercase to uppercase, uppercase to lowercase, numbers not changed all lowercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.transformString(\"g\"), \"G\", '\"g\" => \"G\"');\nassert.equal(convertor.transformString(\"qwertyu\"), \"UYTREWQ\", '\"qwertyu\" => \"UYTREWQ\"');\nassert.equal(convertor.transformString(\"asdfghjklzxcv\"), \"VCXZLKJHGFDSA\", '\"asdfghjklzxcv\" => \"VCXZLKJHGFDSA\"');",
              "err": {},
              "uuid": "3efebd9e-73fc-4bda-885e-fff6a7647b4e",
              "parentUUID": "e190b33c-4dda-4a51-b443-f6e454de330d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "all uppercase",
              "fullTitle": "String transform check: reverse string, lowercase to uppercase, uppercase to lowercase, numbers not changed all uppercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.transformString(\"H\"), \"h\", '\"H\" => \"h\"');\nassert.equal(convertor.transformString(\"ZXCVBNM\"), \"mnbvcxz\", '\"ZXCVBNM\" => \"mnbvcxz\"');\nassert.equal(convertor.transformString(\"ASDFGHJKLZXCV\"), \"vcxzlkjhgfdsa\", '\"ASDFGHJKLZXCV\" => \"vcxzlkjhgfdsa\"');",
              "err": {},
              "uuid": "974193ab-00bb-47cd-a2e7-4e1d10d6170a",
              "parentUUID": "e190b33c-4dda-4a51-b443-f6e454de330d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mixed uppercase and lowercase",
              "fullTitle": "String transform check: reverse string, lowercase to uppercase, uppercase to lowercase, numbers not changed mixed uppercase and lowercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.transformString(\"aDffAkOO\"), \"ooKaFFdA\", '\"aDffAkOO\" => \"ooKaFFdA\"');\nassert.equal(convertor.transformString(\"ljGNbVfdREuimjHSy\"), \"YshJMIUerDFvBngJL\", '\"ljGNbVfdREuimjHSy\" => \"YshJMIUerDFvBngJL\"');",
              "err": {},
              "uuid": "36ce4f91-fee0-4329-b5ec-6f04b09b5307",
              "parentUUID": "e190b33c-4dda-4a51-b443-f6e454de330d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mixed uppercase, lowercase, and numbers",
              "fullTitle": "String transform check: reverse string, lowercase to uppercase, uppercase to lowercase, numbers not changed mixed uppercase, lowercase, and numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(convertor.transformString(\"aDf3fAkO2O0\"), \"0o2oKaF3FdA\", '\"aDf3fAkO2O0\" => \"0o2oKaF3FdA\"');\nassert.equal(convertor.transformString(\"ljG443NbVfdRE65uimjH78Sy\"), \"Ys87hJMIU56erDFvBn344gJL\", '\"ljG443NbVfdRE65uimjH78Sy\" => \"Ys87hJMIU56erDFvBn344gJL\"');",
              "err": {},
              "uuid": "fe0b5b4e-8b6d-4c77-a0cf-8bb4506c39c8",
              "parentUUID": "e190b33c-4dda-4a51-b443-f6e454de330d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "56dc289f-7df0-422a-9efe-71643c947066",
            "07464f8d-580a-418d-9b7f-ac68c0692162",
            "3efebd9e-73fc-4bda-885e-fff6a7647b4e",
            "974193ab-00bb-47cd-a2e7-4e1d10d6170a",
            "36ce4f91-fee0-4329-b5ec-6f04b09b5307",
            "fe0b5b4e-8b6d-4c77-a0cf-8bb4506c39c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d3d7095c-4002-4c9e-8a55-8ceccb6c8cdf",
          "title": "Check appended data in the json output file",
          "fullFile": "/Users/brunoh/assignment/typescript_source/test.spec.ts",
          "file": "/typescript_source/test.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "multiple appends",
              "fullTitle": "Check appended data in the json output file multiple appends",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let convertorTestBlock2 = new CLIConverter_1.CLIConvertor(\"./tests/testoutput.json\");\nconvertorTestBlock2.clearOutputFile();\nconvertorTestBlock2.appendToJson({ \"input\": \"Bruno1999\", \"output\": \"9991ONURb\", \"duration\": 10 });\nconvertorTestBlock2.appendToJson({ \"input\": \"1999\", \"output\": \"9991\", \"duration\": 1 });\nlet jsonOutput = fs.readFileSync(convertorTestBlock2.targetJsonPath, \"utf8\");\nlet jsonParsed = JSON.parse(jsonOutput);\nassert.equal(jsonParsed.length, 2);\nassert.equal(Object.keys(jsonParsed[0]).length, 3, \"not 3 keys in json\");\nassert.equal(jsonParsed[0].input, \"Bruno1999\", \"incorrect input key value\");\nassert.equal(jsonParsed[0].output, \"9991ONURb\", \"incorrect output key value\");\nassert.equal(jsonParsed[0].duration, 10, \"duration not inside json\");\nassert.equal(Object.keys(jsonParsed[1]).length, 3, \"not 3 keys in json\");\nassert.equal(jsonParsed[1].input, \"1999\", \"incorrect input key value\");\nassert.equal(jsonParsed[1].output, \"9991\", \"incorrect output key value\");\nassert.equal(jsonParsed[1].duration, 1, \"duration not inside json\");",
              "err": {},
              "uuid": "4a42c11b-e539-4ec7-b2c6-f3cc5bf3a62d",
              "parentUUID": "d3d7095c-4002-4c9e-8a55-8ceccb6c8cdf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a42c11b-e539-4ec7-b2c6-f3cc5bf3a62d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7e0fd3a2-6512-48e2-8dca-e83ea365cea3",
          "title": "Application 3 iteration",
          "fullFile": "/Users/brunoh/assignment/typescript_source/test.spec.ts",
          "file": "/typescript_source/test.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "check output file (ommiting duration)",
              "fullTitle": "Application 3 iteration check output file (ommiting duration)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let jsonOutput = fs.readFileSync(convertorTestBlock3.targetJsonPath, \"utf8\");\nlet jsonParsed = JSON.parse(jsonOutput);\nassert.equal(jsonParsed.length, 3);\nassert.equal(Object.keys(jsonParsed[0]).length, 3, \"not 3 keys in json\");\nassert.equal(jsonParsed[0].input, \"Bruno1999\", \"incorrect input key value\");\nassert.equal(jsonParsed[0].output, \"9991ONURb\", \"incorrect output key value\");\nassert.equal(\"duration\" in jsonParsed[0], true, \"duration not inside json\");\nassert.equal(Object.keys(jsonParsed[1]).length, 3, \"not 3 keys in json\");\nassert.equal(jsonParsed[1].input, \"1999\", \"incorrect input key value\");\nassert.equal(jsonParsed[1].output, \"9991\", \"incorrect output key value\");\nassert.equal(\"duration\" in jsonParsed[1], true, \"duration not inside json\");\nassert.equal(Object.keys(jsonParsed[2]).length, 3, \"not 3 keys in json\");\nassert.equal(jsonParsed[2].input, \"Bruno\", \"incorrect input key value\");\nassert.equal(jsonParsed[2].output, \"ONURb\", \"incorrect output key value\");\nassert.equal(\"duration\" in jsonParsed[2], true, \"duration not inside json\");",
              "err": {},
              "uuid": "99305c0e-22cc-42b5-9e2b-48e932cb9671",
              "parentUUID": "7e0fd3a2-6512-48e2-8dca-e83ea365cea3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "99305c0e-22cc-42b5-9e2b-48e932cb9671"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}